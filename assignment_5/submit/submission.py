
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: solution.ipynb

import numpy as np
from helper_functions import *

def get_initial_means(array, k):
    """
    Picks k random points from the 2D array
    (without replacement) to use as initial
    cluster means

    params:
    array = numpy.ndarray[numpy.ndarray[float]] - m x n | datapoints x features

    k = int

    returns:
    initial_means = numpy.ndarray[numpy.ndarray[float]]
    """
    # TODO: finish this function
    k_indices = np.random.choice(array.shape[0],k,replace = False)
    initial_means = array[list(k_indices),]

    return initial_means

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def k_means_step(X, k, means):
    """
    A single update/step of the K-means algorithm
    Based on a input X and current mean estimate,
    predict clusters for each of the pixels and
    calculate new means.
    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n | pixels x features (already flattened)
    k = int
    means = numpy.ndarray[numpy.ndarray[float]] - k x n

    returns:
    (new_means, clusters)
    new_means = numpy.ndarray[numpy.ndarray[float]] - k x n
    clusters = numpy.ndarray[int] - m sized vector
    """
    # TODO: finish this function
    X = X.reshape((X.shape[0],1,X.shape[1]))
    means = means.reshape((1,means.shape[0],means.shape[1]))
    diff = X - means
    distance = np.sqrt(np.sum(diff * diff, axis = 2))
    #print("18702")
    #print(X[18702])
    #print(distance[18702])
    clusters = np.argmin(distance,axis = 1)
    #print("clusters")
    #print(np.unique(clusters))
    new_means = []
    X = X.squeeze()
    for i in range(k):
        new_mean = np.mean(X[np.where(clusters == i)],axis = 0)
        new_means.append(list(new_mean))

    new_means = np.array(new_means)

    return new_means, clusters




########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def k_means_segment(image_values, k=3, initial_means=None):
    """
    Separate the provided RGB values into
    k separate clusters using the k-means algorithm,
    then return an updated version of the image
    with the original values replaced with
    the corresponding cluster values.

    params:
    image_values = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - r x c x ch
    k = int
    initial_means = numpy.ndarray[numpy.ndarray[float]] or None

    returns:
    updated_image_values = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - r x c x ch
    """
    # TODO: finish this function
    #print(image_values[0][0])
    #print(image_values.reshape((-1,3))[0])
    image_reshaped = image_values.copy().reshape((-1,image_values.shape[2]))
    if initial_means is None:
        means = get_initial_means(image_reshaped, k)
    else:
        means = initial_means
    #print("initial means")
    #print(means)
    converge = False
    means,last_clusters = k_means_step(image_reshaped, k, means)
    #print("second means")
    #print(means)
    while not converge:
        means,clusters = k_means_step(image_reshaped, k, means)
        #print(means)
        if np.allclose(clusters,last_clusters):
            converge = True
        last_clusters = clusters
        #count += 1
        #if count == 100:
            #break

    for i in range(k):
        image_reshaped[np.where(last_clusters == i)] = means[i]

    updated_image_values = image_reshaped.reshape((image_values.shape[0],image_values.shape[1],image_values.shape[2]))

    return updated_image_values



########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def initialize_parameters(X, k):
    """
    Return initial values for training of the GMM
    Set component mean to a random
    pixel's value (without replacement),
    based on the mean calculate covariance matrices,
    and set each component mixing coefficient (PIs)
    to a uniform values
    (e.g. 4 components -> [0.25,0.25,0.25,0.25]).

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int

    returns:
    (MU, SIGMA, PI)
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    """
    # TODO: finish this function
    k_indices = np.random.choice(X.shape[0],k,replace = False)
    MU = X[list(k_indices)]
    SIGMA = compute_sigma(X,MU)
    PI = np.ones(k) / k

    return MU, SIGMA, PI


########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def compute_sigma(X, MU):
    """
    Calculate covariance matrix, based in given X and MU values

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n

    returns:
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    """
    # TODO: finish this function
    diff = X.reshape((X.shape[0],1,X.shape[1])) - MU.reshape((1,MU.shape[0],MU.shape[1]))
    SIGMA = np.mean(diff.reshape(diff.shape[0],diff.shape[1],1,diff.shape[2]) * diff.reshape(diff.shape[0],diff.shape[1],diff.shape[2],1),axis = 0)

    return SIGMA

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def prob(x, mu, sigma):
    """Calculate the probability of x (a single
    data point or an array of data points) under the
    component with the given mean and covariance.
    The function is intended to compute multivariate
    normal distribution, which is given by N(x;MU,SIGMA).

    params:
    x = numpy.ndarray[float] or numpy.ndarray[numpy.ndarray[float]]
    mu = numpy.ndarray[float]
    sigma = numpy.ndarray[numpy.ndarray[float]]

    returns:
    probability = float or numpy.ndarray[float]
    """
    # TODO: finish this function
    sigma_inv = np.linalg.inv(sigma)
    sigma_det = np.linalg.det(sigma)
    if x.ndim == 1:
        probability = np.exp(-0.5 * np.matmul(np.matmul((x - mu).reshape(1,-1), sigma_inv), (x - mu).reshape(-1,1))) / (np.sqrt(2 * np.pi)**mu.shape[0] * np.sqrt(sigma_det))
        probability = float(probability)
        return probability
    else:
        probability = np.exp(-0.5 * np.matmul(np.matmul((x - mu).reshape(x.shape[0],1,x.shape[1]), sigma_inv.reshape(1,sigma_inv.shape[0],sigma_inv.shape[1])), (x - mu).reshape(x.shape[0],x.shape[1],1))) / (np.sqrt(2 * np.pi)**mu.shape[0] * np.sqrt(sigma_det))
        return probability.squeeze()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def E_step(X,MU,SIGMA,PI,k):
    """
    E-step - Expectation
    Calculate responsibility for each
    of the data points, for the given
    MU, SIGMA and PI.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    k = int

    returns:
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """
    # TODO: finish this function
    joints = []
    for i in range(k):
        joint = PI[i] * prob(X,MU[i],SIGMA[i])
        joints.append(joint)

    joints = np.array(joints)
    responsibility = joints / np.sum(joints, axis = 0)


    return responsibility

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def M_step(X, r, k):
    """
    M-step - Maximization
    Calculate new MU, SIGMA and PI matrices
    based on the given responsibilities.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    r = numpy.ndarray[numpy.ndarray[float]] - k x m
    k = int

    returns:
    (new_MU, new_SIGMA, new_PI)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k x 1
    """
    # TODO: finish this function
    nk = np.sum(r, axis = 1)
    new_MU = np.sum(r.reshape(r.shape[0],r.shape[1],1) * X.reshape(1,X.shape[0],X.shape[1]), axis = 1) / nk.reshape(nk.shape[0],1)
    MU = new_MU
    X_MU = X.reshape(1,X.shape[0],X.shape[1]) - MU.reshape(MU.shape[0],1,MU.shape[1])
    new_SIGMA = np.sum(r.reshape(r.shape[0],r.shape[1],1,1) * np.matmul(np.expand_dims(X_MU,3), np.expand_dims(X_MU,2)), axis = 1) / nk.reshape(nk.shape[0],1,1)
    new_PI = nk / X.shape[0]

    return new_MU, new_SIGMA, new_PI

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def likelihood(X, PI, MU, SIGMA, k):
    """Calculate a log likelihood of the
    trained model based on the following
    formula for posterior probability:

    log(Pr(X | mixing, mean, stdev)) = sum((i=1 to m), log(sum((j=1 to k),
                                      mixing_j * N(x_i | mean_j,stdev_j))))

    Make sure you are using natural log, instead of log base 2 or base 10.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    k = int

    returns:
    log_likelihood = float
    """
    # TODO: finish this function
    joints = []
    for i in range(k):
        joint = PI[i] * prob(X,MU[i],SIGMA[i])
        joints.append(joint)

    joints = np.array(joints)

    log_likelihood = float(np.sum(np.log(np.sum(joints,axis = 0))))

    return log_likelihood

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def train_model(X, k, convergence_function, initial_values = None):
    """
    Train the mixture model using the
    expectation-maximization algorithm.
    E.g., iterate E and M steps from
    above until convergence.
    If the initial_values are None, initialize them.
    Else it's a tuple of the format (MU, SIGMA, PI).
    Convergence is reached when convergence_function
    returns terminate as True,
    see default convergence_function example
    in `helper_functions.py`

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    convergence_function = func
    initial_values = None or (MU, SIGMA, PI)

    returns:
    (new_MU, new_SIGMA, new_PI, responsibility)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k x 1
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """
    # TODO: finish this function
    if initial_values is None:
        MU, SIGMA, PI = initialize_parameters(X, k)
    else:
        MU, SIGMA, PI = initial_values

    l = likelihood(X, PI, MU, SIGMA, k)
    r = E_step(X,MU,SIGMA,PI,k)
    new_MU, new_SIGMA, new_PI = M_step(X, r, k)
    l_new = likelihood(X, new_PI, new_MU, new_SIGMA, k)
    conv_ctr = 0
    conv_ctr, converged = convergence_function(l, l_new, conv_ctr)

    MU = new_MU
    SIGMA = new_SIGMA
    PI = new_PI
    l = l_new

    while not converged:
        r = E_step(X,MU,SIGMA,PI,k)
        new_MU, new_SIGMA, new_PI = M_step(X, r, k)
        l_new = likelihood(X, new_PI, new_MU, new_SIGMA, k)
        conv_ctr, converged = convergence_function(l, l_new, conv_ctr)

        MU = new_MU
        SIGMA = new_SIGMA
        PI = new_PI
        l = l_new

    return new_MU, new_SIGMA, new_PI, r


########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def cluster(r):
    """
    Based on a given responsibilities matrix
    return an array of cluster indices.
    Assign each datapoint to a cluster based,
    on component with a max-likelihood
    (maximum responsibility value).

    params:
    r = numpy.ndarray[numpy.ndarray[float]] - k x m - responsibility matrix

    return:
    clusters = numpy.ndarray[int] - m x 1
    """
    # TODO: finish this
    clusters = np.argmax(r,axis = 0)

    return clusters

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def segment(X, MU, k, r):
    """
    Segment the X matrix into k components.
    Returns a matrix where each data point is
    replaced with its max-likelihood component mean.
    E.g., return the original matrix where each pixel's
    intensity replaced with its max-likelihood
    component mean. (the shape is still mxn, not
    original image size)

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    k = int
    r = numpy.ndarray[numpy.ndarray[float]] - k x m - responsibility matrix

    returns:
    new_X = numpy.ndarray[numpy.ndarray[float]] - m x n
    """
    # TODO: finish this function
    clusters = cluster(r)
    new_X = X.copy()
    for i in range(k):
        new_X[np.where(clusters == i)] = MU[i]

    return new_X

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def best_segment(X,k,iters):
    """Determine the best segmentation
    of the image by repeatedly
    training the model and
    calculating its likelihood.
    Return the segment with the
    highest likelihood.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    iters = int

    returns:
    (likelihood, segment)
    likelihood = float
    segment = numpy.ndarray[numpy.ndarray[float]]
    """
    # TODO: finish this function
    l_highest = float('-inf')
    for i in range(iters):
        MU, SIGMA, PI, r = train_model(X, k, default_convergence)
        l = likelihood(X, PI, MU, SIGMA, k)
        if l > l_highest:
            l_highest = l
            new_MU = MU
            new_r = r



    new_X = segment(X, new_MU, k, new_r)

    return l_highest, new_X


########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def improved_initialization(X,k):
    """
    Initialize the training
    process by setting each
    component mean using some algorithm that
    you think might give better means to start with,
    based on the mean calculate covariance matrices,
    and set each component mixing coefficient (PIs)
    to a uniform values
    (e.g. 4 components -> [0.25,0.25,0.25,0.25]).

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int

    returns:
    (MU, SIGMA, PI)
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    """
    # TODO: finish this function
    MU, SIGMA, PI, r = train_model(X, k, default_convergence)

    SIGMA = compute_sigma(X,MU)
    PI = np.ones(k) / k

    return MU, SIGMA, PI



########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def new_convergence_function(previous_variables, new_variables, conv_ctr,
                             conv_ctr_cap=10):
    """
    Convergence function
    based on parameters:
    when all variables vary by
    less than 10% from the previous
    iteration's variables, increase
    the convergence counter.

    params:
    previous_variables = [numpy.ndarray[float]]
                         containing [means, variances, mixing_coefficients]
    new_variables = [numpy.ndarray[float]]
                    containing [means, variances, mixing_coefficients]
    conv_ctr = int
    conv_ctr_cap = int

    return:
    (conv_crt, converged)
    conv_ctr = int
    converged = boolean
    """
    # TODO: finish this function
    vary_less = True
    for i in range(3):
        if not np.allclose(previous_variables[i],new_variables[i],rtol = 0.1):
            vary_less = False

    if vary_less:
        conv_ctr += 1
    else:
        conv_ctr = 0

    return conv_ctr, conv_ctr > conv_ctr_cap


def train_model_improved(X, k, convergence_function, initial_values = None):
    """
    Train the mixture model using the
    expectation-maximization algorithm.
    E.g., iterate E and M steps from
    above until convergence.
    If the initial_values are None, initialize them.
    Else it's a tuple of the format (MU, SIGMA, PI).
    Convergence is reached when convergence_function
    returns terminate as True. Use new_convergence_fuction
    implemented above.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    convergence_function = func
    initial_values = None or (MU, SIGMA, PI)

    returns:
    (new_MU, new_SIGMA, new_PI, responsibility)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k x 1
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """
    # TODO: finish this function
    if initial_values is None:
        MU, SIGMA, PI = improved_initialization(X, k)
    else:
        MU, SIGMA, PI = initial_values

    previous_variables = [MU, SIGMA, PI]
    r = E_step(X,MU,SIGMA,PI,k)
    new_MU, new_SIGMA, new_PI = M_step(X, r, k)
    new_variables = [new_MU, new_SIGMA, new_PI]
    conv_ctr = 0
    conv_ctr, converged = convergence_function(previous_variables, new_variables, conv_ctr)

    MU = new_MU
    SIGMA = new_SIGMA
    PI = new_PI
    previous_variables = [new_MU, new_SIGMA, new_PI]

    while not converged:
        r = E_step(X,MU,SIGMA,PI,k)
        new_MU, new_SIGMA, new_PI = M_step(X, r, k)
        new_variables = [new_MU, new_SIGMA, new_PI]
        conv_ctr, converged = convergence_function(previous_variables, new_variables, conv_ctr)

        MU = new_MU
        SIGMA = new_SIGMA
        PI = new_PI
        previous_variables = [new_MU, new_SIGMA, new_PI]

    return new_MU, new_SIGMA, new_PI, r

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
# Unittest below will check both of the functions at the same time.
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def bayes_info_criterion(X, PI, MU, SIGMA, k):
    """
    See description above
    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    k = int

    return:
    bayes_info_criterion = int
    """
    # TODO: finish this function
    num_para = MU.shape[0] * MU.shape[1] + SIGMA.shape[0] * SIGMA.shape[1] * (SIGMA.shape[2] + 1) / 2 + PI.shape[0]
    l = likelihood(X, PI, MU, SIGMA, k)
    bayes_info_criterion = num_para * np.log(X.shape[0]) - 2 * l

    return bayes_info_criterion


########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def BIC_likelihood_model_test(image_matrix, comp_means):
    """Returns the number of components
    corresponding to the minimum BIC
    and maximum likelihood with respect
    to image_matrix and comp_means.

    params:
    image_matrix = numpy.ndarray[numpy.ndarray[float]] - m x n
    comp_means = list(numpy.ndarray[numpy.ndarray[float]]) - list(k x n) (means for each value of k)

    returns:
    (n_comp_min_bic, n_comp_max_likelihood)
    n_comp_min_bic = int
    n_comp_max_likelihood = int
    """
    # TODO: finish this method
    min_bic = float("inf")
    max_l = float("-inf")
    for mean in comp_means:
        k = mean.shape[0]
        SIGMA = compute_sigma(image_matrix,mean)
        PI = np.ones(k) / k
        new_MU, new_SIGMA, new_PI, r = train_model_improved(image_matrix, k, new_convergence_function, initial_values = (mean, SIGMA, PI))
        l = likelihood(image_matrix, new_PI, new_MU, new_SIGMA, k)
        if l > max_l:
            n_comp_max_likelihood = k
            max_l = l
        bic = bayes_info_criterion(image_matrix, new_PI, new_MU, new_SIGMA, k)
        if bic < min_bic:
            n_comp_min_bic = k
            min_bic = bic

    return n_comp_min_bic, n_comp_max_likelihood

#tests.GMMTests().test_bayes(BIC_likelihood_model_test, improved_initialization)

def return_your_name():
    # return your name
    # TODO: finish this
    return "Zhaodong Yang"